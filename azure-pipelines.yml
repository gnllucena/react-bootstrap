trigger:
- main

stages:
- stage: Build
  jobs:
  - deployment: 'BuildAndTest'
    environment: 'Build'
    pool:
      vmImage: 'ubuntu-20.04'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: NodeTool@0
              displayName: 'Installing Node.js'
              inputs:
                versionSpec: '10.x'
            - script: yarn install
              displayName: 'Restoring dependencies'
            - script: yarn run test
              displayName: 'Running tests'
            - task: PublishTestResults@2
              displayName: 'Publishing test results'
              inputs:
                testRunner: JUnit
                testResultsFiles: 'coverage/junit.xml'
            - task: PublishCodeCoverageResults@1
              displayName: 'Publishing code coverage'
              inputs:
                codeCoverageTool: 'Cobertura'
                summaryFileLocation: 'coverage/cobertura-coverage.xml'
            - script: yarn run build
              displayName: 'Creating artifact'
              env:
                NODE_OPTIONS: --max_old_space_size=16384
            - publish: $(System.DefaultWorkingDirectory)/dist
              displayName: 'Publishing app artifact'
              artifact: app

- stage: Staging
  jobs:
  - deployment: 'DeployStaging'
    environment: 'Staging'
    pool:
      vmImage: 'ubuntu-20.04'
    variables:
      - group: Staging
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                source: 'current'
            - script: cd $(System.ArtifactsDirectory) && ls -la
              displayName: 'Testing environment variable'